#!/usr/bin/env node

// This script fetches the OSI and SPDX license lists and combines the two in a
// single file that provides the most-interesting (to us) information from both.

import fs from 'node:fs/promises';
import path from 'node:path';

const __dirname = new URL('.', import.meta.url).pathname;
const __filename = new URL(import.meta.url).pathname;

const LICENSE_FILE = path.join(__dirname, '../lib/licenses.ts');
const AUTOGENERATE_TOKEN = '--- AUTOGENERATED FROM HERE DOWN ---';

const OSI_URL = 'https://api.opensource.org/licenses/';
const SPDX_URL =
  'https://raw.githubusercontent.com/spdx/license-list-data/main/json/licenses.json';

const spdx = await (await fetch(SPDX_URL)).json();
const osi = await (await fetch(OSI_URL)).json();

const licenses = new Map();

function getLicense(id) {
  const lowerId = id.toLowerCase();
  if (!licenses.has(lowerId)) {
    licenses.set(lowerId, {});
  }
  return licenses.get(lowerId);
}

for (const {
  licenseId,
  name,
  isOsiApproved,
  isDeprecatedLicenseId,
} of spdx.licenses) {
  const l = getLicense(licenseId);
  l.id = licenseId;
  l.name = name;

  if (isOsiApproved) l.isOsiApproved = true;
  if (isDeprecatedLicenseId) l.isDeprecatedLicenseId = true;
}

for (const license of osi) {
  const spdxId = license.identifiers.find(id => id.scheme === 'SPDX');
  if (!spdxId) {
    console.warn(`Skipping ${license.id} (no SPDX id)`);
    continue;
  }

  const id = spdxId.identifier;
  const l = getLicense(id);

  if (!l.id) {
    console.warn(`No SPDX id for OSI license: ${id}`, l);
  } else if (l.id !== id) {
    console.warn(`SPDX id "${l.id}" != OSI id "${id}"`);
  }

  if (license.keywords) {
    l.keywords = license.keywords;
  }

  if (!l.name) {
    console.warn(`No name for ${id}`, l);
  }
}

const content = await fs.readFile(LICENSE_FILE, 'utf8');
const idx = content.indexOf(AUTOGENERATE_TOKEN);
if (idx === -1) {
  throw new Error(`Couldn't find ${AUTOGENERATE_TOKEN} in ${LICENSE_FILE}`);
}

await fs.writeFile(
  LICENSE_FILE,
  `${content.slice(0, idx + AUTOGENERATE_TOKEN.length)}
// See ${path.relative(path.dirname(LICENSE_FILE), __filename)}

// eslint-disable-next-line prettier/prettier
export const LICENSES: Record<string, License> = ${JSON.stringify(
    Object.fromEntries(licenses.entries()),
  )};
`,
);
